#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<math.h>

#define V 8

int maxFlow=0;
int Edge[V][V]={0};
int Resource=0;
int Sink=V-1;

int nextVertex(int u, int* Path
);
int* Augmentation();
                                  
main(){
	Edge[0][1]=5;	Edge[0][2]=9;	Edge[0][3]=7;	Edge[1][4]=6;	Edge[2][4]=2;	Edge[2][5]=3;	Edge[3][5]=6;	Edge[3][6]=1;	Edge[4][7]=8;
	Edge[5][7]=6;	Edge[6][7]=7;	Edge[1][2]=3;	Edge[3][2]=4;	Edge[4][5]=4;	Edge[5][6]=4;
	int cut[V]={0};
	int *rsPath;
	rsPath=Augmentation();
	int i,j;
	int temp=100000;
	int cEdge[V][V]={0};
	for(i=0;i<V;i++)
		for(j=0;j<V;j++)
			cEdge[i][j]==Edge[i][j];
	for(i=0;i<V-1;i++){
		if(*(rsPath+i+1)>0&&temp>Edge[*(rsPath+i)][*(rsPath+i+1)])
			temp=Edge[*(rsPath+i)][*(rsPath+i+1)];
		else if(*(rsPath+1)==0){
			printf("No Initial Solution Found! Program Stops!");
			exit(1);
		}
		//printf("%d\n",temp);
	}	
	maxFlow+=temp;

//  	for(i=0;i<V;i++){
// 
//  		if(*(rsPath+i+1)>0){
//  			Edge[*(rsPath+i)][*(rsPath+i+1)]=Edge[*(rsPath+i)][*(rsPath+i+1)]-temp;
//  			Edge[*(rsPath+i+1)][*(rsPath+i)]=Edge[*(rsPath+i+1)][*(rsPath+i)]+temp;
// 
// 		}
// 	}
//  	for(i=0;i<V;i++)
//  		for(j=0;j<V;j++)
//  			printf("Edge[%d][%d]=%d\t",i,j,Edge[i][j]);  	
//   	for(i=0;i<V;i++)
//  		printf("%d\t",*(rsPath+i));
	while(*(rsPath+1)!=0){
		for(i=0;i<V-1;i++){
 		
 			if(*(rsPath+i+1)>0){
 				Edge[*(rsPath+i)][*(rsPath+i+1)]=Edge[*(rsPath+i)][*(rsPath+i+1)]-temp;
 				Edge[*(rsPath+i+1)][*(rsPath+i)]=Edge[*(rsPath+i+1)][*(rsPath+i)]+temp;
 				//printf("Edge[%d][%d]=%d\n",i,j,Edge[i][j]);
			}
		}
		
  		for(i=0;i<V;i++)
 			printf("%d\t",*(rsPath+i));
		printf("\nadded flow value: %d\n",temp);
		rsPath=Augmentation();
		temp=100000;
		for(i=0;i<V-1;i++)
			if(*(rsPath+i+1)>0&&temp>Edge[*(rsPath+i)][*(rsPath+i+1)]){
				temp=Edge[*(rsPath+i)][*(rsPath+i+1)];
				//printf("%d temp=%d\n",i,temp);
			}
		if(*(rsPath+1)>0)
			maxFlow+=temp;
		else
			for(i=0;i<V;i++)
				for(j=;j<V;j++)
					if()
	}
		
	printf("The max flow value is %d\n",maxFlow);	
}
int * Augmentation(){
	//int Pre[V]={-1};
	int i=0;
	int Path[V]={0};
	int * ptrPath=&Path[0];
// 	for(i=0;i<V;i++){
//  		printf("%d\t",*(ptrPath+i));
//  	}
	nextVertex(Resource,Path);
	int counter=0;
 	for(i=0;i<V;i++){
 		//printf("%d\t",*(ptrPath+i));
 		if(*(ptrPath+i)==Sink)
 			counter++;
 	}
 	if(counter<1){
 		printf("No Path Found!");
 	}
	return ptrPath;
}

int nextVertex(int u, int* Path){
	int i,j,k,jump;
	int y=0;
	//printf("This is node %d\n",u);
	for(i=1;i<V;i++){
		jump=0;
		for(k=0;k<V;k++)
			if(Path[k]==i){
				jump=1;
				break;
			}
		if(jump==1)
			continue;
				//jump=1;
		if(Edge[u][i]>0){
			//Pre[i]=u;
			for(j=0;j<V;j++)
				if(Path[j]==u){
					Path[j+1]=i;
					break;
				
				}
			if(i!=Sink){
				y=nextVertex(i,Path);	
				if(y==1)
					break;
			}
			else{
				y=1;
				break;	
			}
		}
		else if(i==V-1)
			for(j=0;j<V;j++)
				if(Path[j]==u)
					Path[j]=0;
		
	}
	return y;		

}
